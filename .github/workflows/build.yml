name: Build CRP Library

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2

      # Install dependencies
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          if ! brew list pkgconf &>/dev/null; then
            brew install pkgconf
          else
            echo "pkgconf is already installed."
          fi

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: choco install pkgconfiglite zip

      # Configure and build
      - name: Configure
        run: cmake -S . -B build -DUSE_SCIP=OFF

      - name: Build
        run: cmake --build build --config Release

      - name: Install
        run: cmake --install build --config Release --prefix ${{ github.workspace }}/install

      # Package
      - name: Package binaries
        shell: bash
        run: |
          mkdir -p release
          case "${{ runner.os }}" in
            "Windows") zip -r release/crp-windows.zip install/* ;;
            "macOS")   tar -czvf release/crp-macos.tar.gz install/* ;;
            *)         tar -czvf release/crp-linux.tar.gz install/* ;;
          esac

      # Upload artifact per OS
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: crp-${{ matrix.os }}
          path: release/

  release:
    name: Create GitHub Release
    needs: build
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload all assets to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          set -e
          cd all-artifacts

          find . -type f \( -name "*.tar.gz" -o -name "*.zip" \) | while read -r asset; do
            name=$(basename "$asset")
            echo "Uploading $name..."
            curl \
              -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: $(file -b --mime-type "$asset")" \
              --data-binary @"$asset" \
              "${UPLOAD_URL}?name=${name}"
          done